import streamlit as st
import pandas as pd
from datetime import date
from analyse_logic import analyser_pointages, exporter_excel
st.set_page_config(
    page_title="PerformCheck",
    page_icon="üîç"  # Optionnel : vous pouvez choisir un emoji comme ic√¥ne
)

st.set_page_config(layout="wide")
st.title("Syst√®me d'Analyse de Pointage et de Cong√©s")

# --- √âTAPE 1 : CHARGEMENT DES FICHIERS ---
st.subheader("√âtape 1 : Charger les fichiers")
col1, col2 = st.columns(2)
with col1:
    pointage_file = st.file_uploader("Fichier de Pointage (Obligatoire)", type=["xlsx", "xls"])
with col2:
    conges_file = st.file_uploader("Fichier des Cong√©s (Optionnel)", type=["xlsx", "xls"])

if pointage_file is not None:
    # --- √âTAPE 2 : PARAM√àTRES DE L'ANALYSE ---
    st.subheader("√âtape 2 : D√©finir les param√®tres")
    param_col1, param_col2 = st.columns(2)
    with param_col1:
        # Correction de l'index pour √©viter les erreurs si l'ann√©e change
        current_year = date.today().year
        year_range = range(current_year, current_year + 10)
        annee = st.selectbox("Ann√©e", year_range, index=0)
    with param_col2:
        # Correction de l'index pour √©viter les erreurs au changement de mois
        current_month = date.today().month
        mois = st.selectbox("Mois", range(1, 13), index=current_month - 1)

    dates_du_mois = [date(annee, mois, jour) for jour in range(1, pd.Timestamp(annee, mois, 1).days_in_month + 1)]
    jours_feries_selectionnes = st.multiselect(
        "Confirmez les jours f√©ri√©s pour ce mois :",
        options=dates_du_mois,
        format_func=lambda d: d.strftime('%A %d %B %Y')
    )

    # --- √âTAPE 3 : CHOIX DES COLONNES ---
    st.subheader("√âtape 3 : Choisir les colonnes pour le rapport final")
    
    # AJOUT : Nouvelles colonnes dans la liste de choix
    toutes_les_colonnes_possibles = [
        'Matricule', 
        'Jours Pay√©s (par Employeur)', 
        'Nb Jours Absence Injustifi√©e', 
        'Nb Jours Cong√© Pay√©', 
        'Nb Jours Cong√© Non Pay√©',
        'Nb Jours Pay√© par CNSS',
        'D√©tail des Types de Cong√©',
        'D√©tail Jours de Cong√©',
        'Pay√© Par', 
        'Heures Normales', 
        'Heures Sup 25%', 'Heures Sup 50%', 'Heures Sup 100%', 
        'Majoration 25% (Val)', 'Majoration 50% (Val)', 'Majoration 100% (Val)', 
        'Total Majorations', 
        'Heures Pause D√©jeuner', 
        'D√©tail des Absences'
    ]
    
    selection_par_defaut = ['Matricule', 'Jours Pay√©s (par Employeur)', 'Nb Jours Absence Injustifi√©e', 'Total Majorations']
    
    colonnes_choisies = st.multiselect(
        "Cochez les colonnes √† inclure dans le rapport :",
        options=toutes_les_colonnes_possibles,
        default=selection_par_defaut
    )

    # --- BOUTON FINAL ---
    st.divider()
    if st.button("Lancer l'analyse et pr√©parer le rapport", type="primary"):
        try:
            df_pointage = pd.read_excel(pointage_file, header=None)
            df_conges = pd.DataFrame()
            if conges_file is not None:
                df_conges = pd.read_excel(conges_file, header=None)

            with st.spinner("Analyse en cours..."):
                result_df = analyser_pointages(df_pointage, df_conges, mois, annee, jours_feries_selectionnes)

            if result_df.empty:
                st.warning("Aucun r√©sultat g√©n√©r√©.")
            else:
                st.success("Analyse termin√©e !")
                
                # MODIFICATION : Dictionnaire pour renommer les colonnes pour l'affichage et l'export
                rename_dict = {
                    'Nb Jours Absence Injustifi√©e': 'Nb Jours Absence Injustifi√©e',
                    'Nb Jours Cong√© Pay√©': 'Nb Jours Cong√© Pay√©',
                    'Nb Jours Cong√© Non Pay√©': 'Nb Jours Cong√© Non Pay√©',
                    'Nb Jours Pay√© par CNSS': 'Nb Jours Pay√© par CNSS',
                    'D√©tail des Cong√©s': 'D√©tail des Types de Cong√©',
                    'D√©tail des Jours de Cong√©': 'D√©tail Jours de Cong√©',
                    'Jours_Pay√©s': 'Jours Pay√©s (par Employeur)',
                    'Maj_25': 'Majoration 25% (Val)',
                    'Maj_50': 'Majoration 50% (Val)',
                    'Maj_100': 'Majoration 100% (Val)',
                    'Total_Majorations': 'Total Majorations',
                    'Heures_Normales': 'Heures Normales',
                    'Heures_Pause_Dej': 'Heures Pause D√©jeuner',
                    'D√©tail des Absences': 'D√©tail des Absences',
                    'Pay√© Par': 'Pay√© Par',
                    'Heures_Sup_Maj25': 'Heures Sup 25%',
                    'Heures_Sup_Maj50': 'Heures Sup 50%',
                    'Heures_Sup_Maj100': 'Heures Sup 100%'
                }
                result_df_renamed = result_df.rename(columns=rename_dict)
                apercu_cols = [col for col in colonnes_choisies if col in result_df_renamed.columns]
                
                st.subheader("Aper√ßu du rapport final")
                st.dataframe(result_df_renamed[apercu_cols])

                output_file_name = f"rapport_final_{mois}_{annee}.xlsx"
                # L'export utilise directement le result_df et le dictionnaire de renommage dans la fonction
                output_data = exporter_excel(result_df, output_file_name, colonnes_choisies)
                
                st.download_button(
                    label="T√©l√©charger le rapport",
                    data=output_data,
                    file_name=output_file_name,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        except Exception as e:
            st.error(f"Une erreur est survenue lors de l'analyse : {e}")