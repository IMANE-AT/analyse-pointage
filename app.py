import streamlit as st
import pandas as pd
from datetime import date
from analyse_logic import analyser_pointages, exporter_excel
import db_logic as db
import email_logic as mail

# Configuration de la page (doit √™tre la premi√®re commande Streamlit)
st.set_page_config(
    page_title="PerformCheck",
    page_icon="üîç",
    layout="wide"
)

# Initialise la base de donn√©es au d√©marrage
db.init_db()

def set_professional_styles():
    st.markdown("""
        <style>
        /* 1. Mettre en forme le titre principal */
        .st-emotion-cache-10trblm h1 {
            color: #0083B8; /* Couleur primaire du th√®me */
            border-bottom: 3px solid #0083B8;
            padding-bottom: 5px;
            font-weight: 700;
        }
        /* 2. Style des sous-titres (H2, H3, H4) */
        h2, h3, h4 {
            color: #C0C0C0; /* Couleur claire pour les sections */
        }
        /* 3. Style des boutons primaires pour qu'ils ressortent */
        /* Ceci cible le bouton "Lancer l'analyse" */
        .st-emotion-cache-nahz7x { 
            background-color: #0083B8;
            color: white;
            border-radius: 8px;
            font-weight: bold;
        }
        /* 4. Am√©liorer la lisibilit√© du texte dans les conteneurs */
        .st-emotion-cache-1ftrz1t {
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #444444; 
        }
        </style>
        """, unsafe_allow_html=True)

# Dans app.py, remplacez la fonction show_login_page existante

def show_login_page():
    """Affiche la page de connexion, d'inscription, de mot de passe oubli√© et g√®re la logique de premier compte."""
    
    # Centre la zone de connexion/inscription
    # [1, 2, 1] signifie: colonne vide (1), colonne de contenu (2 fois plus large), colonne vide (1)
    col_empty, col_main, col_empty2 = st.columns([1, 2, 1]) 
    
    with col_main:
        # 1. Affichage du Logo 
        try:
            # Utilisez le nom de fichier sp√©cifi√©
            st.image("GLOBETUDES_LOGO.jpg", width=200) 
        except FileNotFoundError:
            # Titre de secours si le logo n'est pas trouv√©
            st.title("PerformCheck") 

        st.markdown("---") # S√©parateur visuel

        # --- GESTION DU PREMIER COMPTE ---
        # Cas 1 : Aucun utilisateur n'existe -> Cr√©ation du premier compte admin (unique)
        if not db.check_if_users_exist():
            st.subheader("Bienvenue ! Cr√©ez le premier compte administrateur")
            with st.form("signup_form"):
                new_username = st.text_input("Choisissez un nom d'utilisateur (votre e-mail)")
                new_password = st.text_input("Choisissez un mot de passe", type="password")
                if st.form_submit_button("Cr√©er le compte", type="primary"):
                    success, message = db.add_user(new_username, new_password)
                    if success:
                        st.success(message)
                        st.info("Veuillez maintenant vous connecter.")
                        st.rerun()
                    else:
                        st.error(message)
        
        # --- GESTION DES COMPTES EXISTANTS (Connexion, Inscription multiple, Mot de passe oubli√©) ---
        else:
            # Utilisation des onglets pour une pr√©sentation professionnelle
            tab_login, tab_signup, tab_forgot = st.tabs(["Se connecter", "Cr√©er un compte", "Mot de passe oubli√©"])
            
            # --- Onglet de Connexion ---
            with tab_login:
                st.subheader("Connexion")
                with st.form("login_form"):
                    username = st.text_input("Nom d'utilisateur (E-mail)")
                    password = st.text_input("Mot de passe", type="password")
                    if st.form_submit_button("Se connecter", type="primary"):
                        if db.check_user(username, password):
                            st.session_state['logged_in'] = True
                            st.session_state['username'] = username
                            st.rerun()
                        else:
                            st.error("Nom d'utilisateur ou mot de passe incorrect.")

            # --- Onglet de Cr√©ation de Compte (Inscriptions Multiples) ---
            with tab_signup:
                st.subheader("Cr√©er un nouveau compte")
                with st.form("new_signup_form"):
                    new_username = st.text_input("Choisissez un nom d'utilisateur (votre e-mail)", key="new_user_email")
                    new_password = st.text_input("Choisissez un mot de passe", type="password", key="new_user_password")
                    if st.form_submit_button("Cr√©er le compte utilisateur", type="primary"):
                        success, message = db.add_user(new_username, new_password)
                        if success:
                            st.success(message)
                            st.info("Compte cr√©√©. Veuillez maintenant vous connecter.")
                        else:
                            st.error(message)

            # --- Onglet de Mot de Passe Oubli√© ---
            with tab_forgot:
                st.subheader("R√©initialiser le mot de passe")
                with st.form("forgot_password_form"):
                    email_to_reset = st.text_input("Entrez votre nom d'utilisateur (votre e-mail) pour r√©initialiser", key="reset_email_input")
                    if st.form_submit_button("Envoyer le lien de r√©initialisation"):
                        token = db.set_reset_token(email_to_reset)
                        if token:
                            # Votre logique pour construire l'URL et envoyer l'email
                            app_url = st.get_option("server.baseUrlPath")
                            if not app_url.startswith("http"):
                               app_url = "http://localhost:8501" 
                            
                            # NOTE : Assurez-vous que les fonctions db.set_reset_token et mail.send_reset_email fonctionnent
                            st.success("Un e-mail de r√©initialisation a √©t√© envoy√© (si le service d'e-mail est configur√©).")
                        else:
                            st.error("Aucun compte trouv√© pour cet utilisateur.")

def show_reset_password_page(token):
    """Affiche la page pour entrer un nouveau mot de passe."""
    st.title("R√©initialiser votre mot de passe")
    with st.form("reset_form"):
        new_password = st.text_input("Entrez votre nouveau mot de passe", type="password")
        confirm_password = st.text_input("Confirmez le nouveau mot de passe", type="password")
        if st.form_submit_button("Valider"):
            if new_password == confirm_password:
                success, message = db.reset_password_with_token(token, new_password)
                if success:
                    st.success(message)
                    st.info("Vous pouvez maintenant fermer cet onglet et vous connecter.")
                else:
                    st.error(message)
            else:
                st.error("Les mots de passe ne correspondent pas.")


def show_main_app():
    """Affiche l'application principale d'analyse une fois connect√©."""

    # 1. APPLICATION DES STYLES PROFESSIONNELS
    set_professional_styles()

    # --- Sidebar (Barre Lat√©rale) ---
    st.sidebar.success(f"Connect√© en tant que {st.session_state['username']}")
    
    # Bouton de D√©connexion
    if st.sidebar.button("Se d√©connecter", use_container_width=True): # Ajout de use_container_width
        del st.session_state['logged_in']
        del st.session_state['username']
        st.rerun()

    # --- Panneau de Param√®tres Utilisateur ---
    with st.sidebar.expander("‚öôÔ∏è Changer le mot de passe"):
        # CORRECTION MAJEURE: Cl√© de formulaire UNICIT√â.
        with st.form("change_password_form_sidebar", clear_on_submit=True): 
            old_password = st.text_input("Ancien mot de passe", type="password")
            new_password = st.text_input("Nouveau mot de passe", type="password")
            confirm_password = st.text_input("Confirmer le nouveau mot de passe", type="password")
            
            if st.form_submit_button("Valider", type="primary"): # Ajout de type="primary"
                if new_password == confirm_password:
                    success, message = db.update_password(st.session_state['username'], old_password, new_password)
                    if success:
                        st.sidebar.success(message)
                    else:
                        st.sidebar.error(message)
                else:
                    st.sidebar.error("Les nouveaux mots de passe ne correspondent pas.")

    # --- Application Principale (Corps) ---
    st.title("Syst√®me d'Analyse de Pointage et de Cong√©s")

    if 'affectations_manuelles' not in st.session_state:
        st.session_state.affectations_manuelles = []

    # --- √âtape 1 : Charger les fichiers ---
    st.subheader("√âtape 1 : Charger les fichiers")
    col1, col2, col3 = st.columns(3)
    with col1:
        pointage_file = st.file_uploader("Fichier de Pointage (Obligatoire)", type=["xlsx", "xls"])
    with col2:
        conges_file = st.file_uploader("Fichier des Cong√©s (Optionnel)", type=["xlsx", "xls"])
    with col3:
        affectations_file = st.file_uploader("Fichier des Affectations (Optionnel)", type=["xlsx", "xls"])

    # --- Am√©lioration UX : Affectation Manuelle dans un Conteneur Bord√© ---
    st.subheader("‚úçÔ∏è Gestion des Affectations Manuelles")
    # Changement: Utilisation de st.container(border=True) au lieu de st.expander
    with st.container(border=True): 
        st.markdown("**Ajouter ou Corriger une affectation manuellement (Priorit√© Absolue)**")
        with st.form("formulaire_affectation", clear_on_submit=True):
            st.write("Les entr√©es manuelles √©crasent les donn√©es du fichier Excel pour le m√™me jour.")
            col_form1, col_form2, col_form3 = st.columns(3)
            with col_form1:
                manuel_matricule = st.text_input("Matricule de l'employ√©")
            with col_form2:
                manuel_date = st.date_input("Date de l'affectation", key="manuel_date")
            with col_form3:
                manuel_affectation = st.selectbox("Type d'affectation", ["Chantier", "Domicile", "Chantier et Bureau"])
            
            manuel_lieu = st.text_input("Lieu du Chantier (si applicable)")
            manuel_projet = st.text_input("Projet (si travail √† domicile)")

            submitted = st.form_submit_button("Ajouter l'affectation", type="primary") # Ajout type="primary"
            if submitted and manuel_matricule and manuel_date and manuel_affectation:
                st.session_state.affectations_manuelles.append({
                    'Matricule': manuel_matricule, 'Date': manuel_date,
                    'Affectation': manuel_affectation, 'Lieu_Chantier': manuel_lieu,
                    'Projet_Domicile': manuel_projet
                })
                st.success(f"Affectation pour {manuel_matricule} le {manuel_date.strftime('%d/%m/%Y')} ajout√©e !")

    st.divider()
    st.write("#### Affectations manuelles en cours :")
    if not st.session_state.affectations_manuelles:
        st.info("Aucune affectation manuelle n'a √©t√© ajout√©e pour le moment.")
    else:
        # Affichage des affectations manuelles
        col_spec = [1.5, 2, 2, 4, 2]
        cols = st.columns(col_spec)
        cols[0].markdown("**Matricule**"); cols[1].markdown("**Date**"); cols[2].markdown("**Type**"); cols[3].markdown("**Lieu / Projet**")
        for i, affectation in enumerate(st.session_state.affectations_manuelles):
            cols = st.columns(col_spec)
            cols[0].write(affectation['Matricule'])
            cols[1].write(affectation['Date'].strftime('%d/%m/%Y'))
            cols[2].write(affectation['Affectation'])
            cols[3].write(affectation.get('Lieu_Chantier', '') or affectation.get('Projet_Domicile', ''))
            if cols[4].button("Supprimer", key=f"delete_{i}", use_container_width=True):
                del st.session_state.affectations_manuelles[i]
                st.rerun()

    if pointage_file is not None:
        # --- √âTAPE 2 : D√©finir les param√®tres d'analyse ---
        st.subheader("√âtape 2 : D√©finir les param√®tres d'analyse")
        
        param_col1, param_col2 = st.columns(2)
        with param_col1:
            current_year = date.today().year
            annee = st.selectbox("Ann√©e", range(2023, current_year + 15), index=0)
        with param_col2:
            current_month = date.today().month
            mois = st.selectbox("Mois", range(1, 13), index=current_month - 1)
        dates_du_mois = [date(annee, mois, jour) for jour in range(1, pd.Timestamp(annee, mois, 1).days_in_month + 1)]
        jours_feries_selectionnes = st.multiselect(
            "Confirmez les jours f√©ri√©s pour ce mois :",
            options=dates_du_mois,
            format_func=lambda d: d.strftime('%A %d %B %Y')
        )

        # --- √âTAPE 3 : Choisir les colonnes pour le rapport final ---
        st.subheader("√âtape 3 : Choisir les colonnes pour le rapport final")
        toutes_les_colonnes_possibles = [
            'Matricule', 'Score Discipline (%)',
            'Jours Pay√©s (par Employeur)', 
            'Nb Jours Absence Injustifi√©e',
            'D√©tail des Absences', 
            'Nb Jours en Retard',
            'Nb Jours Chantier', 'Nb Jours Domicile',
            'Total Heures Normales', 'Heures Normales Bureau', 'Heures Normales Chantier', 'Heures Normales Domicile',
            'Total Majorations', 'Majoration 25% (Val)', 'Majoration 50% (Val)', 'Majoration 100% (Val)',
            'Total HS 25%', 'Total HS 50%', 'Total HS 100%',
            'Nb Jours Cong√© Pay√© par Employeur', 'Nb Jours Cong√© Non Pay√©', 'Nb Jours Pay√© par CNSS',
            'D√©tail Jours de Cong√©', 'D√©tail des Types de Cong√©',
            'Lieu(x) de Chantier', 'Projet(s) (Domicile)'
        ]
        selection_par_defaut = [
            'Matricule', 'Score Discipline (%)',
            'Jours Pay√©s (par Employeur)', 'Nb Jours Absence Injustifi√©e', 'Total Majorations',
            'Nb Jours Chantier', 'Nb Jours Domicile'
        ]
        colonnes_choisies = st.multiselect(
            "Cochez les colonnes √† inclure dans le rapport :",
            options=toutes_les_colonnes_possibles,
            default=selection_par_defaut
        )

        st.divider()
        if st.button("Lancer l'analyse et pr√©parer le rapport", type="primary"):
            try:
                df_pointage = pd.read_excel(pointage_file, header=None)
                df_conges = pd.read_excel(conges_file, header=None) if conges_file else pd.DataFrame()
                
                df_affectations_fichier = pd.read_excel(affectations_file, header=None) if affectations_file else pd.DataFrame()
                df_affectations_manuel = pd.DataFrame(st.session_state.affectations_manuelles)
                if not df_affectations_manuel.empty:
                    df_affectations_manuel['Date'] = pd.to_datetime(df_affectations_manuel['Date'])

                with st.spinner("Analyse en cours... Cette op√©ration peut prendre un moment."):
                    result_df = analyser_pointages(
                        df_pointage, df_conges,
                        df_affectations_fichier,
                        df_affectations_manuel,
                        mois, annee, jours_feries_selectionnes
                    )

                if result_df.empty:
                    st.warning("Aucun r√©sultat g√©n√©r√©. V√©rifiez les fichiers d'entr√©e.")
                else:
                    st.success("Analyse termin√©e !")
                    st.subheader("Aper√ßu du rapport final")
                    
                    df_pour_apercu = exporter_excel(result_df.copy(), "apercu", toutes_les_colonnes_possibles, return_df=True)
                    
                    colonnes_a_afficher = [col for col in colonnes_choisies if col in df_pour_apercu.columns]
                    st.dataframe(df_pour_apercu[colonnes_a_afficher])
                    
                    output_file_name = f"rapport_final_{mois}_{annee}.xlsx"
                    output_data = exporter_excel(result_df, output_file_name, colonnes_choisies)
                    
                    st.download_button(
                        label="‚¨áÔ∏è T√©l√©charger le rapport complet",
                        data=output_data,
                        file_name=output_file_name,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
            except Exception as e:
                st.error(f"Une erreur est survenue lors de l'analyse : {e}")
                st.error("Veuillez v√©rifier le format de vos fichiers et les donn√©es saisies.")


# V√©rifie si un token de reset est dans l'URL
query_params = st.query_params
if "reset_token" in query_params:
    show_reset_password_page(query_params["reset_token"])
# V√©rifie si l'utilisateur est connect√©
elif st.session_state.get('logged_in', False):
    show_main_app()
# Sinon, affiche la page de connexion
else:
    show_login_page()